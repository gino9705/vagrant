--- 
- 
  hosts : all
  name : "common configuration"
  roles : 
    - geerlingguy.repo-epel
  sudo : true
  tasks : 
    -
      yum: name=libselinux-python state=latest
    - 
      lineinfile : "state=present create=yes dest=/etc/sudoers.d/888-dont-requiretty line=\"Defaults !requiretty\" backup=yes"
    -
      name : "install default packages"
      with_items : 
        - libselinux-python
        - ntp
        - wget
        - screen
        - java7-devel
        - python-keyczar
      yum : "name={{ item }} state=latest"
    - 
      name : "disable selinux"
      selinux : state=disabled
    - 
      name : "configure java"
      template : "src=java.sh.j2 dest=/etc/profile.d/java.sh"
    - 
      name : "stop and disable iptables at boot time"
      service : "name=iptables state=stopped enabled=no"
    - 
      name : "start and enable ntp"
      service : name=ntpd state=started enabled=yes
    - 
      name : "disable transparent hugepage"
      shell : echo 'for i in /sys/kernel/mm/*transparent_hugepage/enabled; do echo never > $i; done' >> /etc/rc.local
      shell : echo 'for i in /sys/kernel/mm/*transparent_hugepage/defrag; do echo never > $i; done' >> /etc/rc.local
      shell : echo 'for i in /sys/kernel/mm/*transparent_hugepage/khugepaged/defrag; do echo no > $i; done' >> /etc/rc.local
      shell : for i in /sys/kernel/mm/*transparent_hugepage/enabled; do echo never > $i; done
      shell : for i in /sys/kernel/mm/*transparent_hugepage/defrag; do echo never > $i; done
      shell : for i in /sys/kernel/mm/*transparent_hugepage/khugepaged/defrag; do echo no $i; done
-
  hosts : ambari
  name : "installing ambari server"
  sudo : true
  tasks :
    -
      name : "install ambari repo"
      get_url : "url={{ ambari_repo_url }} dest=/etc/yum.repos.d/ambari.repo"   
    -
      name : "install ambari-server"
      yum : "name=ambari-server state=latest"
    - 
      name : "configure ambari-server"
      shell : "ambari-server setup -j {{ java_home }} -s > /tmp/ambari-install-output executable=/bin/bash"
    - 
      name : "check if ambari-server is installed"
      wait_for : "path=/tmp/ambari-install-output search_regex=\"completed successfully\""
    - 
      name : "start ambari server and enabled at reboot"
      service : "name=ambari-server state=restarted enabled=yes"
    - 
      name : "check if ambari-server is up"
      wait_for : "host=127.0.0.1 port=8080 delay=10"
